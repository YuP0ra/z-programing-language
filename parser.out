Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    R_DEF

Grammar

Rule 0     S' -> sourcecode
Rule 1     sourcecode -> NEWLINE
Rule 2     sourcecode -> assignment
Rule 3     assignment -> ID ASSIGN expression
Rule 4     assignment -> ID
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> expression MOD expression
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> expression MINUS expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> expression MULTIPLY expression
Rule 11    expression -> NUM
Rule 12    expression -> ID

Terminals, with rules where they appear

ASSIGN               : 3
DIVIDE               : 9
ID                   : 3 4 12
LPAREN               : 5
MINUS                : 8
MOD                  : 6
MULTIPLY             : 10
NEWLINE              : 1
NUM                  : 11
PLUS                 : 7
RPAREN               : 5
R_DEF                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 2
expression           : 3 5 6 6 7 7 8 8 9 9 10 10
sourcecode           : 0

Parsing method: LALR

state 0

    (0) S' -> . sourcecode
    (1) sourcecode -> . NEWLINE
    (2) sourcecode -> . assignment
    (3) assignment -> . ID ASSIGN expression
    (4) assignment -> . ID

    NEWLINE         shift and go to state 2
    ID              shift and go to state 4

    sourcecode                     shift and go to state 1
    assignment                     shift and go to state 3

state 1

    (0) S' -> sourcecode .



state 2

    (1) sourcecode -> NEWLINE .

    $end            reduce using rule 1 (sourcecode -> NEWLINE .)


state 3

    (2) sourcecode -> assignment .

    $end            reduce using rule 2 (sourcecode -> assignment .)


state 4

    (3) assignment -> ID . ASSIGN expression
    (4) assignment -> ID .

    ASSIGN          shift and go to state 5
    $end            reduce using rule 4 (assignment -> ID .)


state 5

    (3) assignment -> ID ASSIGN . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 7

state 6

    (12) expression -> ID .

    MOD             reduce using rule 12 (expression -> ID .)
    PLUS            reduce using rule 12 (expression -> ID .)
    MINUS           reduce using rule 12 (expression -> ID .)
    DIVIDE          reduce using rule 12 (expression -> ID .)
    MULTIPLY        reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    RPAREN          reduce using rule 12 (expression -> ID .)


state 7

    (3) assignment -> ID ASSIGN expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    $end            reduce using rule 3 (assignment -> ID ASSIGN expression .)
    MOD             shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    DIVIDE          shift and go to state 13
    MULTIPLY        shift and go to state 14


state 8

    (5) expression -> LPAREN . expression RPAREN
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 15

state 9

    (11) expression -> NUM .

    MOD             reduce using rule 11 (expression -> NUM .)
    PLUS            reduce using rule 11 (expression -> NUM .)
    MINUS           reduce using rule 11 (expression -> NUM .)
    DIVIDE          reduce using rule 11 (expression -> NUM .)
    MULTIPLY        reduce using rule 11 (expression -> NUM .)
    $end            reduce using rule 11 (expression -> NUM .)
    RPAREN          reduce using rule 11 (expression -> NUM .)


state 10

    (6) expression -> expression MOD . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 16

state 11

    (7) expression -> expression PLUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 17

state 12

    (8) expression -> expression MINUS . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 18

state 13

    (9) expression -> expression DIVIDE . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 19

state 14

    (10) expression -> expression MULTIPLY . expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . expression MOD expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . NUM
    (12) expression -> . ID

    LPAREN          shift and go to state 8
    NUM             shift and go to state 9
    ID              shift and go to state 6

    expression                     shift and go to state 20

state 15

    (5) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    RPAREN          shift and go to state 21
    MOD             shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    DIVIDE          shift and go to state 13
    MULTIPLY        shift and go to state 14


state 16

    (6) expression -> expression MOD expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    $end            reduce using rule 6 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 6 (expression -> expression MOD expression .)
    MOD             shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    DIVIDE          shift and go to state 13
    MULTIPLY        shift and go to state 14

  ! MOD             [ reduce using rule 6 (expression -> expression MOD expression .) ]
  ! PLUS            [ reduce using rule 6 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MOD expression .) ]
  ! MULTIPLY        [ reduce using rule 6 (expression -> expression MOD expression .) ]


state 17

    (7) expression -> expression PLUS expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    MOD             reduce using rule 7 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 7 (expression -> expression PLUS expression .)
    $end            reduce using rule 7 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression PLUS expression .)
    DIVIDE          shift and go to state 13
    MULTIPLY        shift and go to state 14

  ! DIVIDE          [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! MOD             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 18

    (8) expression -> expression MINUS expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    MOD             reduce using rule 8 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 8 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 8 (expression -> expression MINUS expression .)
    $end            reduce using rule 8 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> expression MINUS expression .)
    DIVIDE          shift and go to state 13
    MULTIPLY        shift and go to state 14

  ! DIVIDE          [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! MOD             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 19

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    MOD             reduce using rule 9 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)

  ! MOD             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]
  ! MULTIPLY        [ shift and go to state 14 ]


state 20

    (10) expression -> expression MULTIPLY expression .
    (6) expression -> expression . MOD expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MULTIPLY expression

    MOD             reduce using rule 10 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 10 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 10 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 10 (expression -> expression MULTIPLY expression .)

  ! MOD             [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]
  ! MULTIPLY        [ shift and go to state 14 ]


state 21

    (5) expression -> LPAREN expression RPAREN .

    MOD             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MOD in state 16 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 16 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 16 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 16 resolved as shift
