
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEASSIGN BOOL BOOL BOOL COLON COMMA DIVIDE DOT EQUAL FLOAT ID INTEGER LBRACE LPAREN MINUS MOD MULTIPLY NEWLINE NOTEQUAL PLUS RBRACE RPAREN R_AND R_DEF R_FOR R_IF R_NOT R_OR R_WHILE SEMICOLON STRING TYPE_BOOL TYPE_FLOAT TYPE_INT TYPE_STRING\n    sourcecode  : NEWLINE\n                | assignment\n                | declaration\n                | decision\n                | loop\n                |\n\n\n\n    assignment  : ID ASSIGN idexpr\n                | ID\n\n    idexpr      : value  mathopt  idexpr\n                | value\n\n    value       : ID\n                | BOOL\n                | STRING\n                | expression\n\n\n\n    declaration : R_DEF  ID  LPAREN  args  RPAREN  COLON\n\n    args        : ID  COMMA  args\n                | ID\n                |\n\n\n\n    expression  : LPAREN  expression  RPAREN\n                | num  mathopt  expression\n                | num\n\n    num         : INTEGER\n                | FLOAT\n\n    mathopt     : PLUS\n                | MINUS\n                | MULTIPLY\n                | DIVIDE\n                | MOD\n\n\n\n    decision    : R_IF  condition  COLON\n\n    loop        : R_WHILE  condition  COLON\n\n    condition   : BOOL\n                | ID  condopt  value\n                | LPAREN  condition  RPAREN\n                | condition  condexpend  condition\n\n    condopt     : EQUAL\n                | NOTEQUAL\n\n    condexpend  : R_AND\n                | R_NOT\n                | R_OR\n\n\n\n\n    '
    
_lr_action_items = {'NEWLINE':([0,],[2,]),'$end':([0,1,2,3,4,5,6,7,18,19,20,21,22,23,25,26,27,29,38,52,53,54,58,],[-6,0,-1,-2,-3,-4,-5,-8,-11,-7,-10,-12,-13,-14,-21,-22,-23,-29,-30,-9,-19,-20,-15,]),'ID':([0,8,9,10,11,16,28,30,31,32,33,34,35,36,39,40,41,42,43,44,55,],[7,12,15,15,18,15,47,15,-37,-38,-39,18,-35,-36,18,-24,-25,-26,-27,-28,47,]),'R_DEF':([0,],[8,]),'R_IF':([0,],[9,]),'R_WHILE':([0,],[10,]),'ASSIGN':([7,],[11,]),'BOOL':([9,10,11,16,30,31,32,33,34,35,36,39,40,41,42,43,44,],[14,14,21,14,14,-37,-38,-39,21,-35,-36,21,-24,-25,-26,-27,-28,]),'LPAREN':([9,10,11,12,16,24,30,31,32,33,34,35,36,39,40,41,42,43,44,46,],[16,16,24,28,16,24,16,-37,-38,-39,24,-35,-36,24,-24,-25,-26,-27,-28,24,]),'STRING':([11,34,35,36,39,40,41,42,43,44,],[22,22,-35,-36,22,-24,-25,-26,-27,-28,]),'INTEGER':([11,24,34,35,36,39,40,41,42,43,44,46,],[26,26,26,-35,-36,26,-24,-25,-26,-27,-28,26,]),'FLOAT':([11,24,34,35,36,39,40,41,42,43,44,46,],[27,27,27,-35,-36,27,-24,-25,-26,-27,-28,27,]),'COLON':([13,14,17,18,21,22,23,25,26,27,49,50,51,53,54,56,],[29,-31,38,-11,-12,-13,-14,-21,-22,-23,-34,-32,-33,-19,-20,58,]),'R_AND':([13,14,17,18,21,22,23,25,26,27,37,49,50,51,53,54,],[31,-31,31,-11,-12,-13,-14,-21,-22,-23,31,31,-32,-33,-19,-20,]),'R_NOT':([13,14,17,18,21,22,23,25,26,27,37,49,50,51,53,54,],[32,-31,32,-11,-12,-13,-14,-21,-22,-23,32,32,-32,-33,-19,-20,]),'R_OR':([13,14,17,18,21,22,23,25,26,27,37,49,50,51,53,54,],[33,-31,33,-11,-12,-13,-14,-21,-22,-23,33,33,-32,-33,-19,-20,]),'RPAREN':([14,18,21,22,23,25,26,27,28,37,45,47,48,49,50,51,53,54,55,57,],[-31,-11,-12,-13,-14,-21,-22,-23,-18,51,53,-17,56,-34,-32,-33,-19,-20,-18,-16,]),'EQUAL':([15,],[35,]),'NOTEQUAL':([15,],[36,]),'PLUS':([18,20,21,22,23,25,26,27,53,54,],[-11,40,-12,-13,-14,40,-22,-23,-19,-20,]),'MINUS':([18,20,21,22,23,25,26,27,53,54,],[-11,41,-12,-13,-14,41,-22,-23,-19,-20,]),'MULTIPLY':([18,20,21,22,23,25,26,27,53,54,],[-11,42,-12,-13,-14,42,-22,-23,-19,-20,]),'DIVIDE':([18,20,21,22,23,25,26,27,53,54,],[-11,43,-12,-13,-14,43,-22,-23,-19,-20,]),'MOD':([18,20,21,22,23,25,26,27,53,54,],[-11,44,-12,-13,-14,44,-22,-23,-19,-20,]),'COMMA':([47,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sourcecode':([0,],[1,]),'assignment':([0,],[3,]),'declaration':([0,],[4,]),'decision':([0,],[5,]),'loop':([0,],[6,]),'condition':([9,10,16,30,],[13,17,37,49,]),'idexpr':([11,39,],[19,52,]),'value':([11,34,39,],[20,50,20,]),'expression':([11,24,34,39,46,],[23,45,23,23,54,]),'num':([11,24,34,39,46,],[25,25,25,25,25,]),'condexpend':([13,17,37,49,],[30,30,30,30,]),'condopt':([15,],[34,]),'mathopt':([20,25,],[39,46,]),'args':([28,55,],[48,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sourcecode","S'",1,None,None,None),
  ('sourcecode -> NEWLINE','sourcecode',1,'p_sourcecode','compiler.py',81),
  ('sourcecode -> assignment','sourcecode',1,'p_sourcecode','compiler.py',82),
  ('sourcecode -> declaration','sourcecode',1,'p_sourcecode','compiler.py',83),
  ('sourcecode -> decision','sourcecode',1,'p_sourcecode','compiler.py',84),
  ('sourcecode -> loop','sourcecode',1,'p_sourcecode','compiler.py',85),
  ('sourcecode -> <empty>','sourcecode',0,'p_sourcecode','compiler.py',86),
  ('assignment -> ID ASSIGN idexpr','assignment',3,'p_sourcecode','compiler.py',90),
  ('assignment -> ID','assignment',1,'p_sourcecode','compiler.py',91),
  ('idexpr -> value mathopt idexpr','idexpr',3,'p_sourcecode','compiler.py',93),
  ('idexpr -> value','idexpr',1,'p_sourcecode','compiler.py',94),
  ('value -> ID','value',1,'p_sourcecode','compiler.py',96),
  ('value -> BOOL','value',1,'p_sourcecode','compiler.py',97),
  ('value -> STRING','value',1,'p_sourcecode','compiler.py',98),
  ('value -> expression','value',1,'p_sourcecode','compiler.py',99),
  ('declaration -> R_DEF ID LPAREN args RPAREN COLON','declaration',6,'p_sourcecode','compiler.py',103),
  ('args -> ID COMMA args','args',3,'p_sourcecode','compiler.py',105),
  ('args -> ID','args',1,'p_sourcecode','compiler.py',106),
  ('args -> <empty>','args',0,'p_sourcecode','compiler.py',107),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_sourcecode','compiler.py',111),
  ('expression -> num mathopt expression','expression',3,'p_sourcecode','compiler.py',112),
  ('expression -> num','expression',1,'p_sourcecode','compiler.py',113),
  ('num -> INTEGER','num',1,'p_sourcecode','compiler.py',115),
  ('num -> FLOAT','num',1,'p_sourcecode','compiler.py',116),
  ('mathopt -> PLUS','mathopt',1,'p_sourcecode','compiler.py',118),
  ('mathopt -> MINUS','mathopt',1,'p_sourcecode','compiler.py',119),
  ('mathopt -> MULTIPLY','mathopt',1,'p_sourcecode','compiler.py',120),
  ('mathopt -> DIVIDE','mathopt',1,'p_sourcecode','compiler.py',121),
  ('mathopt -> MOD','mathopt',1,'p_sourcecode','compiler.py',122),
  ('decision -> R_IF condition COLON','decision',3,'p_sourcecode','compiler.py',126),
  ('loop -> R_WHILE condition COLON','loop',3,'p_sourcecode','compiler.py',128),
  ('condition -> BOOL','condition',1,'p_sourcecode','compiler.py',130),
  ('condition -> ID condopt value','condition',3,'p_sourcecode','compiler.py',131),
  ('condition -> LPAREN condition RPAREN','condition',3,'p_sourcecode','compiler.py',132),
  ('condition -> condition condexpend condition','condition',3,'p_sourcecode','compiler.py',133),
  ('condopt -> EQUAL','condopt',1,'p_sourcecode','compiler.py',135),
  ('condopt -> NOTEQUAL','condopt',1,'p_sourcecode','compiler.py',136),
  ('condexpend -> R_AND','condexpend',1,'p_sourcecode','compiler.py',138),
  ('condexpend -> R_NOT','condexpend',1,'p_sourcecode','compiler.py',139),
  ('condexpend -> R_OR','condexpend',1,'p_sourcecode','compiler.py',140),
]
