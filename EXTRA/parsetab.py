
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftPOWASSIGN DIVIDE ID LPAREN MINUS MOD MULTIPLY NEWLINE NUM PLUS POW RPAREN\n    sourcecode  : NEWLINE\n                | varcall\n                | assignment\n                | pure_expression\n    \n    varcall     : ID\n    \n    assignment  : ID ASSIGN expression\n    \n    pure_expression  : expression\n    \n    expression  : LPAREN        expression  RPAREN\n                | expression    MOD         expression\n                | expression    POW         expression\n                | expression    PLUS        expression\n                | expression    MINUS       expression\n                | expression    DIVIDE      expression\n                | expression    MULTIPLY    expression\n                | NUM\n                | ID\n    '
    
_lr_action_items = {'NEWLINE':([0,],[2,]),'ID':([0,8,10,11,12,13,14,15,16,],[6,18,18,18,18,18,18,18,18,]),'LPAREN':([0,8,10,11,12,13,14,15,16,],[8,8,8,8,8,8,8,8,8,]),'NUM':([0,8,10,11,12,13,14,15,16,],[9,9,9,9,9,9,9,9,9,]),'$end':([1,2,3,4,5,6,7,9,18,19,20,21,22,23,24,25,26,],[0,-1,-2,-3,-4,-5,-7,-15,-16,-6,-9,-10,-11,-12,-13,-14,-8,]),'ASSIGN':([6,],[10,]),'MOD':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,11,-15,11,-16,11,11,-10,-11,-12,-13,-14,-8,]),'POW':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,12,-15,12,-16,12,12,-10,12,12,12,12,-8,]),'PLUS':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,13,-15,13,-16,13,13,-10,-11,-12,-13,-14,-8,]),'MINUS':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,14,-15,14,-16,14,14,-10,-11,-12,-13,-14,-8,]),'DIVIDE':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,15,-15,15,-16,15,15,-10,15,15,-13,-14,-8,]),'MULTIPLY':([6,7,9,17,18,19,20,21,22,23,24,25,26,],[-16,16,-15,16,-16,16,16,-10,16,16,-13,-14,-8,]),'RPAREN':([9,17,18,20,21,22,23,24,25,26,],[-15,26,-16,-9,-10,-11,-12,-13,-14,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sourcecode':([0,],[1,]),'varcall':([0,],[3,]),'assignment':([0,],[4,]),'pure_expression':([0,],[5,]),'expression':([0,8,10,11,12,13,14,15,16,],[7,17,19,20,21,22,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sourcecode","S'",1,None,None,None),
  ('sourcecode -> NEWLINE','sourcecode',1,'p_0','calc_comppiler.py',56),
  ('sourcecode -> varcall','sourcecode',1,'p_0','calc_comppiler.py',57),
  ('sourcecode -> assignment','sourcecode',1,'p_0','calc_comppiler.py',58),
  ('sourcecode -> pure_expression','sourcecode',1,'p_0','calc_comppiler.py',59),
  ('varcall -> ID','varcall',1,'p_1','calc_comppiler.py',64),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_2','calc_comppiler.py',74),
  ('pure_expression -> expression','pure_expression',1,'p_3','calc_comppiler.py',83),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_4','calc_comppiler.py',93),
  ('expression -> expression MOD expression','expression',3,'p_4','calc_comppiler.py',94),
  ('expression -> expression POW expression','expression',3,'p_4','calc_comppiler.py',95),
  ('expression -> expression PLUS expression','expression',3,'p_4','calc_comppiler.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_4','calc_comppiler.py',97),
  ('expression -> expression DIVIDE expression','expression',3,'p_4','calc_comppiler.py',98),
  ('expression -> expression MULTIPLY expression','expression',3,'p_4','calc_comppiler.py',99),
  ('expression -> NUM','expression',1,'p_4','calc_comppiler.py',100),
  ('expression -> ID','expression',1,'p_4','calc_comppiler.py',101),
]
